package com.example.finalproject.domain.codi;

import com.example.finalproject._core.utils.AppJwtUtil;
import com.example.finalproject.domain.MyRestDoc;
import com.example.finalproject.domain.photo.Photo;
import com.example.finalproject.domain.user.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

@AutoConfigureMockMvc
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)
public class CodiRestControllerTest extends MyRestDoc {
    private static String jwt;

    private ObjectMapper om = new ObjectMapper();

    @BeforeAll
    public static void setUp() {
        jwt = AppJwtUtil.create(
                User.builder()
                        .id(3)
                        .myName("변우석")
                        .email("bunwuseok@example.com")
                        .blueChecked(true)
                        .build());
    }

    @Test
    public void searchCodi_fail_test() throws Exception {
        // given
        String keyword = "입니alskdjfalksjfdlkasjdflkasjdf다";

        // when
        ResultActions actions = mvc.perform(MockMvcRequestBuilders.get("/app/search-codi")
                .param("keyword", keyword)
                .header("Authorization", "Bearer " + jwt));
        // eye
        String respBody = actions.andReturn().getResponse().getContentAsString();
        System.out.println("respBody = " + respBody);
        // then
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.status").value(400));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.success").value(false));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response").isEmpty());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.errorMessage").value("검색어는 10글자 이하로 입력해주세요."));
        actions.andDo(MockMvcResultHandlers.print()).andDo(document);

    }

    @Test
    public void searchCodi_success_test() throws Exception {
        // given
        String keyword = "입니다";

        // when
        ResultActions actions = mvc.perform(MockMvcRequestBuilders.get("/app/search-codi")
                .param("keyword", keyword)
                .header("Authorization", "Bearer " + jwt));

        // eye
        String respBody = actions.andReturn().getResponse().getContentAsString();
        System.out.println("respBody = " + respBody);

        // then
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.status").value(200));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.success").value(true));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].codiId").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].codiPhotoId").value(14));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].photoName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].photoPath").value("/upload/codi/user-03-codi01.webp"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.errorMessage").doesNotExist());
        actions.andDo(MockMvcResultHandlers.print()).andDo(document);
    }


    @Test
    public void openCodiPage_fail_test() throws Exception {
        // when
        ResultActions actions = mvc.perform(MockMvcRequestBuilders.get("/codi-pages/60")
                .header("Authorization", "Bearer " + jwt));
        // eye
        String respBody = actions.andReturn().getResponse().getContentAsString();
        System.out.println("respBody = " + respBody);
        //respBody = {"status":404,"success":false,"response":null,"errorMessage":"정보를 찾을 수 없습니다."}

        // then
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.status").value(404));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.success").value(false));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response").isEmpty());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.errorMessage").value("정보를 찾을 수 없습니다."));
        actions.andDo(MockMvcResultHandlers.print()).andDo(document);

    }

    @Test
    public void openCodiPage_success_test() throws Exception {
        // when
        ResultActions actions = mvc.perform(MockMvcRequestBuilders.get("/codi-pages/1")
                .header("Authorization", "Bearer " + jwt));
        // eye
        String respBody = actions.andReturn().getResponse().getContentAsString();
        System.out.println("respBody = " + respBody);
        // then
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.status").value(200));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.success").value(true));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiId").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.description").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.createdAt").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.isloved").value(false));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.loveCount").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.mainPhotos[0].mainPhotoId").value(14));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.mainPhotos[0].mainPhotoName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.mainPhotos[0].photoPath").value("/upload/codi/user-03-codi01.webp"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.mainPhotos[0].isMainPhoto").value(true));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.itemPhotos[0].itemsPhotoId").value(64));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.itemPhotos[0].itemsId").value(5));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.itemPhotos[0].itemsPhotoName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.itemPhotos[0].photoPath").value("/upload/items/item05/mainItemPhoto.jpg"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.itemPhotos[0].isMainPhoto").value(true));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.otherCodiPhotos[0].codiPhotoId").value(14));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.otherCodiPhotos[0].codiId").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.otherCodiPhotos[0].codiPhotoName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.otherCodiPhotos[0].photoPath").value("/upload/codi/user-03-codi01.webp"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.otherCodiPhotos[0].isMainPhoto").value(true));
        actions.andDo(MockMvcResultHandlers.print()).andDo(document);
    }

    @Test
    public void appCodiPage_fail_test() throws Exception {
        // when
        ResultActions actions = mvc.perform(MockMvcRequestBuilders.get("/app/codi-pages/60")
                .header("Authorization", "Bearer " + jwt));
        // eye
        String respBody = actions.andReturn().getResponse().getContentAsString();
        System.out.println("respBody = " + respBody);
        // {"status":404,"success":false,"response":null,"errorMessage":"정보를 찾을 수 없습니다."}
        // then
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.status").value(404));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.success").value(false));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response").isEmpty());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.errorMessage").value("정보를 찾을 수 없습니다."));
        actions.andDo(MockMvcResultHandlers.print()).andDo(document);
    }

    @Test
    public void appCodiPage_success_test() throws Exception {
        // when
        ResultActions actions = mvc.perform(MockMvcRequestBuilders.get("/app/codi-pages/1")
                .header("Authorization", "Bearer " + jwt));
        // eye
        String respBody = actions.andReturn().getResponse().getContentAsString();
        System.out.println("respBody = " + respBody);
        // then
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.status").value(200));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.success").value(true));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiId").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.description").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.createdAt").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.isloved").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.loveCount").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.mainPhotos[0].mainPhotoId").value(14));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.mainPhotos[0].mainPhotoName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.mainPhotos[0].photoPath").value("/upload/codi/user-03-codi01.webp"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.mainPhotos[0].isMainPhoto").value(true));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.itemPhotos[0].itemsPhotoId").value(64));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.itemPhotos[0].itemsId").value(5));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.itemPhotos[0].itemsPhotoName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.itemPhotos[0].photoPath").value("/upload/items/item05/mainItemPhoto.jpg"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.itemPhotos[0].isMainPhoto").value(true));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.otherCodiPhotos[0].codiId").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.otherCodiPhotos[0].codiPhotoId").value(14));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.otherCodiPhotos[0].codiPhotoName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.otherCodiPhotos[0].photoPath").value("/upload/codi/user-03-codi01.webp"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.otherCodiPhotos[0].isMainPhoto").value(true));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.errorMessage").doesNotExist());
        actions.andDo(MockMvcResultHandlers.print()).andDo(document);


    }

    @Test
    public void topItemSave_fail_test() throws Exception {
        // when
        ResultActions actions = mvc.perform(MockMvcRequestBuilders.get("/app/codi-register/add-item/topi")
                .header("Authorization", "Bearer " + jwt));
        // eye
        String respBody = actions.andReturn().getResponse().getContentAsString();
        //System.out.println("respBody = " + respBody);
        //{"status":400,"success":false,"response":null,"errorMessage":"유효한 카테고리 이름이 아닙니다."}
        // then
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.status").value(400));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.success").value(false));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response").isEmpty());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.errorMessage").value("유효한 카테고리 이름이 아닙니다."));
        actions.andDo(MockMvcResultHandlers.print()).andDo(document);
    }

    @Test
    public void topItemSave_success_test() throws Exception {
        // when
        ResultActions actions = mvc.perform(MockMvcRequestBuilders.get("/app/codi-register/add-item/top")
                .header("Authorization", "Bearer " + jwt));
        // eye
        String respBody = actions.andReturn().getResponse().getContentAsString();
        System.out.println("respBody = " + respBody);
        // then
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.status").value(200));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.success").value(true));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].brandId").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].photoId").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].photoPath").value("/upload/brand/salomon.jpg"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].itemInfo[0].itemId").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].itemInfo[0].itemName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].itemInfo[0].photoPath").value("/upload/items/item01/mainItemPhoto.jpg"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].itemInfo[1].itemId").value(7));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].itemInfo[1].itemName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].itemInfo[1].photoPath").value("/upload/items/item07/mainItemPhoto.jpg"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].itemInfo[2].itemId").value(14));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].itemInfo[2].itemName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[0].itemInfo[2].photoPath").value("/upload/items/item14/mainItemPhoto.jpg"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].brandId").value(2));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].photoId").value(2));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].photoPath").value("/upload/brand/lee.png"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].itemInfo[0].itemId").value(3));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].itemInfo[0].itemName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].itemInfo[0].photoPath").value("/upload/items/item03/mainItemPhoto.jpg"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].itemInfo[1].itemId").value(9));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].itemInfo[1].itemName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].itemInfo[1].photoPath").value("/upload/items/item09/mainItemPhoto.jpg"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].itemInfo[2].itemId").value(11));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].itemInfo[2].itemName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].itemInfo[2].photoPath").value("/upload/items/item11/mainItemPhoto.jpg"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].itemInfo[3].itemId").value(16));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].itemInfo[3].itemName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[1].itemInfo[3].photoPath").value("/upload/items/item16/mainItemPhoto.jpg"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[2].brandId").value(3));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[2].photoId").value(3));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[2].photoPath").value("/upload/brand/espionage.png"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[2].itemInfo[0].itemId").value(5));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[2].itemInfo[0].itemName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[2].itemInfo[0].photoPath").value("/upload/items/item05/mainItemPhoto.jpg"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[2].itemInfo[1].itemId").value(12));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[2].itemInfo[1].itemName").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response[2].itemInfo[1].photoPath").value("/upload/items/item12/mainItemPhoto.jpg"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.errorMessage").doesNotExist());
        actions.andDo(MockMvcResultHandlers.print()).andDo(document);

    }

    @Test
    public void update_page_fail_test() throws Exception {
        // when
        ResultActions actions = mvc.perform(MockMvcRequestBuilders.get("/app/codi-update-page/3")
                .header("Authorization", "Bearer " + jwt));
        // eye
        String respBody = actions.andReturn().getResponse().getContentAsString();
        System.out.println("respBody = " + respBody);
        //{"status":401,"success":false,"response":null,"errorMessage":"인증된 사용자가 아닙니다."}
        // then
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.status").value(401));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.success").value(false));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response").isEmpty());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.errorMessage").value("인증된 사용자가 아닙니다."));
        actions.andDo(MockMvcResultHandlers.print()).andDo(document);
    }

    @Test
    public void update_page_success_test() throws Exception {
        // given

        // when
        ResultActions actions = mvc.perform(MockMvcRequestBuilders.get("/app/codi-update-page/1")
                .header("Authorization", "Bearer " + jwt));
        // eye
        String respBody = actions.andReturn().getResponse().getContentAsString();
        System.out.println("respBody = " + respBody);
        // then
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.status").value(200));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.success").value(true));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiId").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.description").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiPhotos[0].photoId").value(14));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiPhotos[0].codiId").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiPhotos[0].photoPath").value("/upload/codi/user-03-codi01.webp"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiPhotos[0].isMainPhoto").value(true));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiPhotos[0].sort").value("CODI"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiPhotos[1].photoId").value(15));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiPhotos[1].codiId").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiPhotos[1].photoPath").value("/upload/codi/user-03-codi01-detail.webp"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiPhotos[1].isMainPhoto").value(false));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiPhotos[1].sort").value("CODI"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiItemPhotos[0].photoId").value(64));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiItemPhotos[0].itemId").value(5));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiItemPhotos[0].photoPath").value("/upload/items/item05/mainItemPhoto.jpg"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiItemPhotos[0].categoryName").value("top"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiItemPhotos[0].sort").value("ITEM"));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.errorMessage").doesNotExist());
        actions.andDo(MockMvcResultHandlers.print()).andDo(document);
    }


    @Test
    public void codiRegister_fail_test() throws Exception {
        // given
        List<CodiRequest.SaveDTO.AppSaveDTO> codiPhotos = List.of(
                new CodiRequest.SaveDTO.AppSaveDTO("photo1.jpg", ""
                        , true, Photo.Sort.CODI),
                new CodiRequest.SaveDTO.AppSaveDTO("photo2.jpg", ""
                        , false, Photo.Sort.CODI)
        );

        List<CodiRequest.SaveDTO.ItemCodiDTO> items = List.of(
                new CodiRequest.SaveDTO.ItemCodiDTO(1, 1),
                new CodiRequest.SaveDTO.ItemCodiDTO(2, 2)
        );

        CodiRequest.SaveDTO reqDTO = new CodiRequest.SaveDTO(1, "Test", codiPhotos, items);
        String reqBody = om.writeValueAsString(reqDTO);
        // when
        ResultActions actions = mvc.perform(post("/app/codi-register")
                .content(reqBody)
                .contentType(MediaType.APPLICATION_JSON)
                .header("Authorization", "Bearer " + jwt));

        // eye
        String respBody = actions.andReturn().getResponse().getContentAsString();
        System.out.println("respBody = " + respBody);
//        {"status":400,"success":false,"response":null,"errorMessage":"설명은 최소 10자 최대 150자 이어야 합니다.  : description"}
        // then
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.status").value(400));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.success").value(false));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response").isEmpty());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.errorMessage").value("설명은 최소 10자 최대 150자 이어야 합니다.  : description"));
        actions.andDo(MockMvcResultHandlers.print()).andDo(document);
    }

    @Test
    public void codiRegister_success_test() throws Exception {
        // given
        List<CodiRequest.SaveDTO.AppSaveDTO> codiPhotos = List.of(
                new CodiRequest.SaveDTO.AppSaveDTO("photo1.jpg", ""
                        , true, Photo.Sort.CODI),
                new CodiRequest.SaveDTO.AppSaveDTO("photo2.jpg", ""
                        , false, Photo.Sort.CODI)
        );

        List<CodiRequest.SaveDTO.ItemCodiDTO> items = List.of(
                new CodiRequest.SaveDTO.ItemCodiDTO(1, 1),
                new CodiRequest.SaveDTO.ItemCodiDTO(2, 2)
        );

        CodiRequest.SaveDTO reqDTO = new CodiRequest.SaveDTO(1, "Test Description", codiPhotos, items);
        String reqBody = om.writeValueAsString(reqDTO);
        // when
        ResultActions actions = mvc.perform(post("/app/codi-register")
                .content(reqBody)
                .contentType(MediaType.APPLICATION_JSON)
                .header("Authorization", "Bearer " + jwt));

        // eye
        String respBody = actions.andReturn().getResponse().getContentAsString();
        System.out.println("respBody = " + respBody);

        // then
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.status").value(200));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.success").value(true));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.codiId").value(22));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.userId").value(1));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.photoId").value(97));
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.response.photoPath").exists());
        actions.andExpect(MockMvcResultMatchers.jsonPath("$.errorMessage").doesNotExist());
        actions.andDo(MockMvcResultHandlers.print()).andDo(document);
    }
}